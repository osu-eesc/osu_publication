<?php
/**
 * @file
 * Code for the OSU publication feature.
 */

include_once('osu_publication.features.inc');
/**
 * Implements hook_init().
 */
// function osu_publication_init() {
//   drupal_add_css(drupal_get_path('module', 'osu_publication') . '/commerce_styles.css');
//   drupal_add_js(drupal_get_path('module', 'osu_publication') . '/osu_publication.js');
// }


/**
 * Implements hook_form_alter.
 */
function osu_publication_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'search_block_form'){
    $form['search_block_form']['#title'] = t('Submit');
    $form['actions']['submit']['#value'] = t('Submit');
    $form['search_block_form']['#size'] = 30;
    $form['search_block_form']['#attributes']['placeholder'] = t('Search by topic, author, or series number');
  }
  if($form['#id'] == 'views-exposed-form-osu-publication-taxonomy-term-topic-child-term-page'){
    $form['field_media_type_tid']['#options']['All'] = 'Media Type';
  }

  if ($form_id == 'estimates_expenses_node_form') {
    //dpm($form);
    $form['field_expense_amount']['#size'] = 20;
    $form['field_expense_invoice_number']['#size'] = 20;
  }

  if($form_id == 'commerce_product_ui_product_form') {

    $form['sku']['#description'] = t('Enter the entire series number, lowercase and without spaces (e.g., em1234-s).');
  }

  if ($form_id == 'osu_catalog_publication_node_form') {
    //dpm($form);
    global $user;
    // Disable add to store for everyone except Store managers (7) and Administrators (3).
    if (!in_array($user->roles[3], $user->roles) && !in_array($user->roles[7], $user->roles)) {
      $form['field_add_to_store']['und']['#disabled'] = TRUE;
      $form['field_add_to_store']['und']['#description'] = t('Only the store manager and admins can add and edit store information (e.g., cost, price, and inventory).');
    }

    // change inline entity buttons text
    $form['field_authors_entity_ref']['und']['actions']['ief_add_existing']['#value'] = t('Add existing author');
    $form['field_authors_entity_ref']['und']['actions']['ief_add']['#value'] = t('Add new author');
    $form['field_authors_entity_ref']['und']['form']['#title'] = t('Add new author');

    $form['field_estimate_entity_ref']['und']['actions']['ief_add']['#value'] = t('Add estimate or expense');
    $form['field_estimate_entity_ref']['und']['form']['#title'] = t('Add estimate or expense');

    $description_author = 'To add an author who\'s already in the database: Click the "add existing author" button. Start typing, and select the correct name from the auto-complete list.<br />To add an author who\'s not already in the database: Click the "add new author" button, fill in the appropriate fields, and click "save."<br />If you\'re not sure: Try the "add existing" button first. If you don\'t find the person, click "cancel" and then click the "add new" button.';

    $description_estimate = 'Click "Add estimate or expense" button to add a new estimate or expense for this project.';

    $form['field_estimate_entity_ref']['und']['#description'] = t($description_estimate);

    $form['field_authors_entity_ref']['und']['#description'] = t($description_author);


    if (empty($form['nid']['#value']) && empty($form['field_series_number']['und'][0]['value']['#default_value'])) {
      $form['field_series_prefix'] = array(
        '#title' => t('Series prefix'),
        '#type' => 'select',
        '#options' => $form['field_series_prefix']['und']['#options'],
        '#ajax' => array(
          'callback' => 'series_number_callback',
          'wrapper' => 'series_number_div',
        ),
      );

      $nextseriesnum = '';

      if (empty($form['nid']['#value']) && !empty($form_state['values']['field_series_prefix']) ) {
        // pass arg to view to get the highest series number
        $args[0] = $form_state['values']['field_series_prefix'];
        $view = views_get_view('suggest_series_number');
        $display_id = 'nextseriesnumber';
        $view->set_display($display_id);
        $view->execute_display($display_id, $args);

        $results = $view->result;
        $nextseriesnum = $results[0]->field_data_field_series_number_field_series_number_value + 1;
      }

      // This entire form element will be replaced with an updated value.
      $form['field_series_number'] = array(
        '#type' => 'textfield',
        '#title' => t('Series number'),
        '#value' => $nextseriesnum,
        '#prefix' => '<div id="series_number_div">',
        '#suffix' => '</div>',
      );

    }

  }

}

function series_number_callback($form, $form_state) {
  return $form['field_series_number'];
}

function series_prefix_number_suffix_callback($form, $form_state) {

  $product_id = $form_state['product_id'];

  if ($product_id && is_numeric($product_id)) {

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_publication_product', 'product_id', $product_id, '=')
      ->execute();

    foreach ($result['node'] as $key => $node) {
      foreach ($node as $key => $nid) {
        if ($key == 'nid') {
          if (node_load($nid)) {
            $thisnode = node_load($nid);

            $sku = $thisnode->field_series_prefix['und'][0]['value'] . $thisnode->field_series_number['und'][0]['value'] . $thisnode->field_series_prefix['und'][0]['value'];

            db_update('commerce_product')
              ->fields(array(
                'sku' => $sku,
              ))
              ->condition('product_id', $product_id, '=')
              ->execute();

          } // if (node_load($nid))

        }  // if ($key == 'nid')

      }  // foreach ($node as $key => $nid)

    }  // foreach ($result['node'] as $key => $node)

  }  // if ($product_id && is_numeric($product_id))

} // function series_prefix_number_suffix_callback



/**
 * Implements hook_token_info().
 */
function osu_publication_token_info(){
  $info['types']['node'] = array(
    /*'name' => t('Topic First'),
    'description' => t('Grabs the first topic value.'),
    'needs-data' => 'node',*/
  );
  // Topic token.
  $info['tokens']['node']['field-topic-first-title'] = array(
    'name' => t('Publication topic'),
    'description' => t("The topic of the publication."),
    'type' => 'node',
  );
  // Topic token.
  $info['tokens']['node']['field-topic-first-tid'] = array(
    'name' => t('Publication topic'),
    'description' => t("The topic of the publication."),
    'type' => 'node',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function osu_publication_tokens($type, $tokens, array $data = array(), array $options = array()){
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'node' && !empty($data['node'])){
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'field-topic-first-tid':
          if ($items = field_get_items('node', $node, 'field_topic')) {
            $replacements[$original] = $sanitize ? filter_xss($items[0]['tid']) : $items[0]['tid'];
          }
        break;

        case 'field-topic-first-title':
          if ($items = field_get_items('node', $node, 'field_topic')) {
            $term_object = taxonomy_term_load($items[0]['tid']);
            $replacements[$original] = $sanitize ? filter_xss($term_object->name) : $term_object->name;
          }
        break;

      }
    }
  }
}


function osu_publication_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  //dpm($entity_form);
  // Disable add to store for everyone except Store managers (7) and Administrators (3).
  global $user;

  if (!in_array($user->roles[3], $user->roles) && !in_array($user->roles[7], $user->roles)) {
    $entity_form['title']['#disabled'] = TRUE;
    $entity_form['sku']['#disabled'] = TRUE;
    $entity_form['commerce_price']['#disabled'] = TRUE;
    $entity_form['field_cost_per_copy']['#disabled'] = TRUE;
    $entity_form['commerce_stock']['#disabled'] = TRUE;
    $entity_form['status']['#disabled'] = TRUE;
  }
  $entity_form['sku']['#description'] = t('Enter the entire series number, lowercase and without spaces (e.g., em1234-s).');


}

/**
 * Alter the fields used to represent an entity in the IEF table.
 *
 * The fields can be either Field API fields or properties defined through
 * hook_entity_property_info().
 *
 * @param $fields
 *   The fields to alter.
 * @param $context
 *   An array with the following keys:
 *   - parent_entity_type: The type of the parent entity.
 *   - parent_bundle: The bundle of the parent entity.
 *   - field_name: The name of the reference field on which IEF is operating.
 *   - entity_type: The type of the referenced entities.
 *   - allowed_bundles: Bundles allowed on the reference field.
 *
 * @see EntityInlineEntityFormController::tableFields()
 */
function osu_publication_inline_entity_form_table_fields_alter(&$fields, $context) {

  // IEF is managing products on a node form.
  if ($context['parent_entity_type'] == 'node' && $context['entity_type'] == 'node') {

    // Change fields in Estimates and expenses table
    if ($context['field_name'] == 'field_estimate_entity_ref') {

      // dpm($context);

      unset($fields['status']); // remove status

      $fields['field_expense_types'] = array(
        'type' => 'field',
        'label' => t('Expense type'),
        'weight' => 1,
      );

      $fields['field_estimate_or_actual'] = array(
        'type' => 'field',
        'label' => t('Estimate or actual'),
        'weight' => 2,
      );

      $fields['field_expense_amount'] = array(
        'type' => 'field',
        'label' => t('Amount'),
        'weight' => 3,
      );

      $fields['field_estimate_quantity'] = array(
        'type' => 'field',
        'label' => t('Quantity'),
        'weight' => 4,
      );

      $fields['field_expense_date'] = array(
        'type' => 'field',
        'label' => t('Date'),
        'weight' => 5,
      );

      $fields['field_expense_invoice_number'] = array(
        'type' => 'field',
        'label' => t('Invoice number'),
        'weight' => 6,
      );

      $fields['field_expense_invoice_date'] = array(
        'type' => 'field',
        'label' => t('Invoice date'),
        'weight' => 7,
      );

    }

    // Change fields in Authors table
    if ($context['field_name'] == 'field_authors_entity_ref') {

      //dpm($fields, '$fields');

      unset($fields['status']); // remove status
      unset($fields['title']); // remove title

      $fields['field_first_name'] = array(
        'type' => 'field',
        'label' => t('First name'),
        'weight' => 1,
      );

      $fields['field_last_name'] = array(
        'type' => 'field',
        'label' => t('Last name'),
        'weight' => 2,
      );

      $fields['field_last_name'] = array(
        'type' => 'field',
        'label' => t('Last name'),
        'weight' => 2,
      );

    }



  }

}

